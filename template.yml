AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: >
  GitHub Code Scanning - MTTR

Parameters:
  ReadCapacityUnits:
    Type: Number
    Default: 10
  WriteCapacityUnits:
    Type: Number
    Default: 10
  AppName:
    Type: String
    Default: "GitHubCodeScanning"
  DeployEnvironment:
    Type: String
    Default: "dev"
  DefaultLimit:
    Type: Number
    Default: 10

Resources:
  ## Authorizers
  GitHubWebhookSecretValidator:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/authorizers/githubWebhookSecretValidator
      Description: "A Lambda that validates a GitHub Secret"
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          EVENT_BUS_NAME: !Ref GSSAREventBus
      Events:
        UserEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt HTTPApiEventQueue.Arn
      Handler: lib/main.handler
      Policies:
        - AmazonSSMReadOnlyAccess
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GSSAREventBus
      Runtime: nodejs14.x
      Timeout: 10
      Tracing: Active

  GitHubWebhookIPValidator:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/authorizers/githubWebhookIPValidator
      Description: "A Lambda Function that validates the IP comes from GitHub"
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
      Handler: lib/main.handler
      Policies:
        - AmazonSSMReadOnlyAccess
      Runtime: nodejs14.x
      Timeout: 10
      Tracing: Active

  ## DB Functions

  CreateDBRecord:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/helpers/createDBRecord
      Description: "A Lambda Function that creates an initial record in the AllEventsTable when a new code scanning alert is found"
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
      Handler: lib/main.handler
      Policies:
        - AmazonSSMReadOnlyAccess
      Runtime: nodejs14.x
      Timeout: 10
      Tracing: Active

  UpdateDBRecord:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/helpers/updateDBRecord
      Description: "A Lambda Function that updates a record in the AllEventsTable when an existing code scanning alert is fixed/closed"
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref AllDataTable
      Handler: lib/main.handler
      Policies:
        - AmazonSSMReadOnlyAccess
        - DynamoDBReadPolicy:
            TableName: !Ref AllDataTable
      Runtime: nodejs14.x
      Timeout: 10
      Tracing: Active

  ## DB Triggers ##

  DBTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/helpers/handleDBRecordEvent
      Handler: lib/main.handler
      Runtime: nodejs14.x
      Description: "A Lambda Function triggers from a DynamoDB Stream. Purpose is to build the data for the overview table"
      Events:
        UserEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt GSSAREventQueue.Arn
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref RepositoryOverviewTable
          EVENT_BUS_NAME: !Ref GSSAREventBus
      Tracing: Active
      Timeout: 10
      ReservedConcurrentExecutions: 1
      Policies:
        - AmazonSSMReadOnlyAccess
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GSSAREventBus
        - DynamoDBReadPolicy:
            TableName: !Ref RepositoryOverviewTable
        - DynamoDBWritePolicy:
            TableName: !Ref RepositoryOverviewTable

  InsertDataIntoOrganisationOverviewTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/helpers/insertDataIntoOrganisationOverviewTable
      Handler: lib/main.handler
      Runtime: nodejs14.x
      Description: "A Lambda Function triggers from a DynamoDB Stream. Purpose is to build the data for the overview table"
      Events:
        UserEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt RepositoryOverviewEventQueue.Arn
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          TABLE_NAME: !Ref OrganisationOverviewTable
          EVENT_BUS_NAME: !Ref GSSAREventBus
      Tracing: Active
      Timeout: 10
      ReservedConcurrentExecutions: 1
      Policies:
        - AmazonSSMReadOnlyAccess
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GSSAREventBus
        - DynamoDBReadPolicy:
            TableName: !Ref OrganisationOverviewTable
        - DynamoDBWritePolicy:
            TableName: !Ref OrganisationOverviewTable

  StreamEventSendToSQS:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/helpers/allTableStreamEventHandler
      Handler: lib/main.handler
      Runtime: nodejs14.x
      Description: "A Lambda Function triggers from a DynamoDB Stream. Purpose is to send to an SQS"
      Events:
        UserEvent:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            BatchSize: 1
            Stream: !GetAtt AllDataTable.StreamArn
            MaximumRetryAttempts: 3
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          QUEUE_URL: !Ref GSSAREventQueue
      Tracing: Active
      Timeout: 3
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt GSSAREventQueue.QueueName

  StreamRepoOverviewEventSendToSQS:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/helpers/streamRepoOverviewEventSendToSQS
      Handler: lib/main.handler
      Runtime: nodejs14.x
      Description: "A Lambda Function triggers from a DynamoDB Stream. Purpose is to send to an SQS"
      Events:
        UserEvent:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            BatchSize: 1
            Stream: !GetAtt RepositoryOverviewTable.StreamArn
            MaximumRetryAttempts: 3
      Environment:
        Variables:
          NODE_ENV: Production
          REGION: !Ref "AWS::Region"
          QUEUE_URL: !Ref RepositoryOverviewEventQueue
      Tracing: Active
      Timeout: 3
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt RepositoryOverviewEventQueue.QueueName

  ### Event Bus ###

  GSSAREventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ["-", [GCSMTTR, !Ref AWS::StackName]]

  ### API Gateways ###

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: True

  HttpApiPayloadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /github/alert
      Target: !Sub "integrations/${HttpApiPayloadRouteIntegration}"
      AuthorizerId: !Ref HttpApiAuthorizer
      AuthorizationType: REQUEST

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      AuthorizerType: REQUEST
      AuthorizerPayloadFormatVersion: "2.0"
      EnableSimpleResponses: true
      AuthorizerCredentialsArn: !GetAtt LambdaInvokeRole.Arn
      Name: HTTPAPIAuth
      AuthorizerUri: !Sub
        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GitHubWebhookIPValidator}/invocations"
        - { GitHubWebhookIPValidator: !GetAtt GitHubWebhookIPValidator.Arn }

  HttpApiPayloadRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Proxy incoming HTTP Payload into SQS
      IntegrationType: AWS_PROXY
      IntegrationSubtype: SQS-SendMessage
      PayloadFormatVersion: "1.0"
      CredentialsArn: !GetAtt HttpApiRole.Arn
      RequestParameters:
        QueueUrl: !Ref HTTPApiEventQueue
        MessageBody: $request.body
        MessageGroupId: $request.body.repository.full_name
        MessageDeduplicationId:
          !Join [
            "-",
            [$request.body.repository.full_name, $request.body.alert.number],
          ]
        MessageAttributes:
          Signiture:
            DataType: String
            StringValue: "$request.header.x-hub-signature-256"

  HttpApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiWriteToSQS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action: sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt HTTPApiEventQueue.Arn

  ### IAM Roles & Policies ###

  StepFunctionsApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: AllowSFNExec
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "states:StartExecution"
                Resource: !Ref GCSMTTRStateMachine

  LambdaInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"

  LambdaInvokePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaInvokePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: !GetAtt GitHubWebhookIPValidator.Arn
      Roles:
        - Ref: "LambdaInvokeRole"

  ### SQS Queues ###

  GSSAREventQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: false
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId
      FifoQueue: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
        maxReceiveCount: 16

  MyDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true

  RepositoryOverviewEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: false
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId
      FifoQueue: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RepositoryOverviewDeadLetterQueue.Arn
        maxReceiveCount: 16

  HTTPApiDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true

  HTTPApiEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: false
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId
      FifoQueue: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt HTTPApiDeadLetterQueue.Arn
        maxReceiveCount: 16

  RepositoryOverviewDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true

  ### State Machines (Step Functions) ###

  GCSMTTRStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: stepfunctions/gcsmttr.yml
      DefinitionSubstitutions:
        UpdateDBRecordFunctionArn: !GetAtt UpdateDBRecord.Arn
        CreateDBRecordFunctionArn: !GetAtt CreateDBRecord.Arn
        AllDataTable: !Ref AllDataTable
      Type: EXPRESS
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GSSAREventBus
            RetryPolicy:
              MaximumRetryAttempts: 2
            DeadLetterConfig:
              Type: SQS
              QueueLogicalId: gcsmttrDeadLetterQueue
            Pattern:
              source:
                - custom.kickOffSecretScanRemediation
              detail-type:
                - transaction
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GitHubWebhookSecretValidator
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateDBRecord
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateDBRecord
        - DynamoDBWritePolicy:
            TableName: !Ref AllDataTable
        - CloudWatchLogsFullAccess

    ###### DynamoDB Table ######

  AllDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: "254"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: organisationName
          AttributeType: S
        - AttributeName: repositoryName
          AttributeType: S
        - AttributeName: alertID
          AttributeType: N
        - AttributeName: alertCreatedAtFullTimestamp
          AttributeType: S
        - AttributeName: alertClosedAtFullTimestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: alertByOrganisationName
          KeySchema:
            - AttributeName: organisationName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByRepositoryName
          KeySchema:
            - AttributeName: repositoryName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByAlertID
          KeySchema:
            - AttributeName: alertID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByRepositoryNameAndAlertID
          KeySchema:
            - AttributeName: repositoryName
              KeyType: HASH
            - AttributeName: alertID
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByOrganisationNameAndRepositoryName
          KeySchema:
            - AttributeName: organisationName
              KeyType: HASH
            - AttributeName: repositoryName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByRepositoryNameAndAlertCreatedAt
          KeySchema:
            - AttributeName: repositoryName
              KeyType: HASH
            - AttributeName: alertCreatedAtFullTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: alertByRepositoryNameAndAlertClosedAt
          KeySchema:
            - AttributeName: repositoryName
              KeyType: HASH
            - AttributeName: alertClosedAtFullTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits

  AllEventsTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 85
      MinCapacity: 5
      ResourceId: !Sub table/${AllDataTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  AllEventsTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AllEventsTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  RepositoryOverviewTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: monthlyPeriod
          AttributeType: S
        - AttributeName: repositoryName
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: summaryByrepositoryNameandMonthlyPeriod
          KeySchema:
            - AttributeName: repositoryName
              KeyType: HASH
            - AttributeName: monthlyPeriod
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: summaryByMonthlyPeriodAndRepositoryName
          KeySchema:
            - AttributeName: monthlyPeriod
              KeyType: HASH
            - AttributeName: repositoryName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: summaryByMonthlyPeriod
          KeySchema:
            - AttributeName: monthlyPeriod
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits

  RepositoryOverviewTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 85
      MinCapacity: 5
      ResourceId: !Sub table/${RepositoryOverviewTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  RepositoryOverviewTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref RepositoryOverviewTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  OrganisationOverviewTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: monthlyPeriod
          AttributeType: S
        - AttributeName: organisationName
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: summaryByOrganisationNameandMonthlyPeriod
          KeySchema:
            - AttributeName: organisationName
              KeyType: HASH
            - AttributeName: monthlyPeriod
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: summaryByMonthlyPeriodAndOrganisationName
          KeySchema:
            - AttributeName: monthlyPeriod
              KeyType: HASH
            - AttributeName: organisationName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits
        - IndexName: summaryByMonthlyPeriod
          KeySchema:
            - AttributeName: monthlyPeriod
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref ReadCapacityUnits
            WriteCapacityUnits: !Ref WriteCapacityUnits

  OrganisationOverviewTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 85
      MinCapacity: 5
      ResourceId: !Sub table/${OrganisationOverviewTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  OrganisationOverviewTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref OrganisationOverviewTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  #
  # AppSync GraphQL API
  #

  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Join [-, [!Ref AppName, !Ref DeployEnvironment]]
      AuthenticationType: API_KEY
      XrayEnabled: TRUE
      LogConfig:
        FieldLogLevel: ALL
        ExcludeVerboseContent: TRUE
        CloudWatchLogsRoleArn: !GetAtt IAMRoleForCloudWatchFromAppSync.Arn

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DefinitionS3Location: "./schema.graphql"

  AppSyncApiKey:
    Type: "AWS::AppSync::ApiKey"
    Properties:
      Description: "API Key for GCSMTTR"
      Expires: 1655376396
      ApiId: !GetAtt [AppSyncAPI, ApiId]

  IAMRoleForCloudWatchFromAppSync:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
                - events.amazonaws.com

  AppSyncDataIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com

  AppSyncAllDataPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AppSyncUsersDataPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchGetItem"
            Resource:
              - !Join ["", [!GetAtt AllDataTable.Arn, "*"]]
      Roles:
        - !Ref AppSyncDataIAMRole

  AppSyncRepoOverviewDataPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AppSyncRepoOverviewDataPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchGetItem"
            Resource:
              - !Join ["", [!GetAtt RepositoryOverviewTable.Arn, "*"]]
      Roles:
        - !Ref AppSyncDataIAMRole

  AppSyncOrgverviewDataPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: AppSyncOrgOverviewDataPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchGetItem"
            Resource:
              - !Join ["", [!GetAtt OrganisationOverviewTable.Arn, "*"]]
      Roles:
        - !Ref AppSyncDataIAMRole

  #
  # AppSync DataSources
  #

  AppSyncAllEventsTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      Name: AllEventsTable
      Description: "The AllEvents Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDataIAMRole.Arn
      DynamoDBConfig:
        TableName: !Select [1, !Split ["/", !GetAtt AllDataTable.Arn]]
        AwsRegion: !Sub ${AWS::Region}

  AppSyncDataRepositoryOverviewTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      Name: RepositoryOverviewTable
      Description: "The Repository Overview Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDataIAMRole.Arn
      DynamoDBConfig:
        TableName:
          !Select [1, !Split ["/", !GetAtt RepositoryOverviewTable.Arn]]
        AwsRegion: !Sub ${AWS::Region}

  AppSyncDataOrganisationOverviewTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      Name: OrganisationOverviewTable
      Description: "The Organisation Overview Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDataIAMRole.Arn
      DynamoDBConfig:
        TableName:
          !Select [1, !Split ["/", !GetAtt OrganisationOverviewTable.Arn]]
        AwsRegion: !Sub ${AWS::Region}

  #
  # AppSync Resolvers
  #

  QueryRepositoryOverviewByRepositoryNameResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: repositoryOverviewbyRepositoryName
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryRepositoryOverviewByRepositoryNameFunction.FunctionId
      RequestMappingTemplate: !Join
        - "\n"
        - - !Sub
            - "#set( $resultsLimit = ${queryLimit} )"
            - { queryLimit: !Ref DefaultLimit }
          - "#set( $ctx.stash.DefaultLimit = ${resultsLimit} )"
          - "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryRepositoryOverviewByRepositoryNameFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataRepositoryOverviewTableDataSource.Name
      Description: AppSync QueryRepositoryOverviewByRepositoryName Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryRepositoryOverviewByRepositoryNameFunction
      RequestMappingTemplateS3Location: mapping-templates/repositoryOverviewByRepositoryName-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/multiItem-response-mapping-template.vtl

  QueryOrganisationOverviewByOrganisationNameResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: organisationOverviewbyOrganisationName
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryOrganisationOverviewByOrganisationNameFunction.FunctionId
      RequestMappingTemplate: !Join
        - "\n"
        - - !Sub
            - "#set( $resultsLimit = ${queryLimit} )"
            - { queryLimit: !Ref DefaultLimit }
          - "#set( $ctx.stash.DefaultLimit = ${resultsLimit} )"
          - "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryOrganisationOverviewByOrganisationNameFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataOrganisationOverviewTableDataSource.Name
      Description: AppSync QueryOrganisationOverviewByOrganisationName Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryOrganisationOverviewByOrganisationNameFunction
      RequestMappingTemplateS3Location: mapping-templates/organisationOverviewByOrganisationName-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/multiItem-response-mapping-template.vtl

  ### Multi Item Resolver and Functions ##

  QueryAlertsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getAlerts
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryAlertsResolverFunction.FunctionId
      RequestMappingTemplate: !Join
        - "\n"
        - - !Sub
            - "#set( $resultsLimit = ${queryLimit} )"
            - { queryLimit: !Ref DefaultLimit }
          - "#set( $ctx.stash.DefaultLimit = ${resultsLimit} )"
          - "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryAlertsResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncAllEventsTableDataSource.Name
      Description: AppSync Alerts Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryAlertsNameFunction
      RequestMappingTemplateS3Location: mapping-templates/scan-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/multiItem-response-mapping-template.vtl

  QueryRepositoryOverviewsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getRepositoryOverviews
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryRepositoryOverviewsResolverFunction.FunctionId
      RequestMappingTemplate: !Join
        - "\n"
        - - !Sub
            - "#set( $resultsLimit = ${queryLimit} )"
            - { queryLimit: !Ref DefaultLimit }
          - "#set( $ctx.stash.DefaultLimit = ${resultsLimit} )"
          - "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryRepositoryOverviewsResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataRepositoryOverviewTableDataSource.Name
      Description: AppSync RepositoryOverviews Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryRepositoryOverviewsNameFunction
      RequestMappingTemplateS3Location: mapping-templates/scan-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/multiItem-response-mapping-template.vtl

  QueryOrganisationOverviewsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getOrganisationOverviews
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryOrganisationOverviewsResolverFunction.FunctionId
      RequestMappingTemplate: !Join
        - "\n"
        - - !Sub
            - "#set( $resultsLimit = ${queryLimit} )"
            - { queryLimit: !Ref DefaultLimit }
          - "#set( $ctx.stash.DefaultLimit = ${resultsLimit} )"
          - "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryOrganisationOverviewsResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataOrganisationOverviewTableDataSource.Name
      Description: AppSync OrganisationOverviews Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryOrganisationOverviewsNameFunction
      RequestMappingTemplateS3Location: mapping-templates/scan-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/multiItem-response-mapping-template.vtl

  ### Single Item Resolver and Functions ##

  QueryAlertResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getAlert
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryAlertResolverFunction.FunctionId
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryAlertResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncAllEventsTableDataSource.Name
      Description: AppSync Alert Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryAlertNameFunction
      RequestMappingTemplateS3Location: mapping-templates/getItem-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/getItem-response-mapping-template.vtl

  QueryRepositoryOverviewResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getRepositoryOverview
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryRepositoryOverviewResolverFunction.FunctionId
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryRepositoryOverviewResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataRepositoryOverviewTableDataSource.Name
      Description: AppSync RepositoryOverview Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryRepositoryOverviewNameFunction
      RequestMappingTemplateS3Location: mapping-templates/getItem-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/getItem-response-mapping-template.vtl

  QueryOrganisationOverviewResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      TypeName: Query
      FieldName: getOrganisationOverview
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryOrganisationOverviewResolverFunction.FunctionId
      RequestMappingTemplate: "{}"
      ResponseMappingTemplate: "$util.toJson($context.result)"

  QueryOrganisationOverviewResolverFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt [AppSyncAPI, ApiId]
      DataSourceName: !GetAtt AppSyncDataOrganisationOverviewTableDataSource.Name
      Description: AppSync OrganisationOverview Query Function
      FunctionVersion: "2018-05-29"
      Name: QueryOrganisationOverviewNameFunction
      RequestMappingTemplateS3Location: mapping-templates/getItem-request-mapping-template.vtl
      ResponseMappingTemplateS3Location: mapping-templates/getItem-response-mapping-template.vtl

###### Outputs ######

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/"
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi
