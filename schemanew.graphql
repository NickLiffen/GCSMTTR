type User @aws_oidc @aws_api_key {
  id: ID
  lillySystemId: String
  lillyCostCenter: String
  email: String
  accountType: AccountType
  globalId: String
  firstName: String
  lastName: String
  updatedAt: String
  m5GlobalId: String
  m5FirstName: String
  m5LastName: String
  m5Email: String
  employeeGroupCode: String
  employeeGroupDescription: String
  employeeStatusCode: String
  employeeStatusDescription: String
  costCenterName: String
}

type VP @aws_oidc @aws_api_key {
  m5GlobalId: String
  m5FirstName: String
  m5LastName: String
  m5Email: String
}

enum AccountType {
  HUMAN
  SERVICE
  INACTIVE
  EXTERNALCOLLABORATOR
}

enum Sort {
  asc
  desc
}

type PaginatedUsers @aws_oidc @aws_api_key {
  users: [User!]!
  nextToken: String
}

type DataSummary @aws_oidc @aws_api_key {
  id: ID
  billingCycle: String
  lillyCostCenter: String
  costCenterName: String
  m5FirstName: String
  m5LastName: String
  m5GlobalId: String
  userCount: Int
}

type PaginatedDataSummaries @aws_oidc @aws_api_key {
  data: [DataSummary!]!
  nextToken: String
}

enum UserOrderByInputValue {
  lillySystemId
}

input UserOrderingInputField {
  lillySystemId: String
}

input UsersOrderByInput {
  field: UserOrderByInputValue
  direction: Sort
}

type PaginatedBillingCycles @aws_oidc @aws_api_key {
  billingCycles: [String!]!
  nextToken: String
}

type Query @aws_oidc @aws_api_key {
  #
  # Queries for retrieving user data
  #
  getUser(id: ID, lillySystemId: String): User

  getUsers(limit: Int, nextToken: String): PaginatedUsers!

  userBySystemId(lillySystemId: String!): User

  # Only lillyCostCenter is required for usersByCostCenterAndSystemId query
  usersByCostCenterAndSystemId(
    lillyCostCenter: String!,
    lillySystemId: String, # If provided will return single user
    first: Int, # If provided, last is ignored
    last: Int,
    before: String, # lillySystemId --If provided, after is ignored
    after: String,  # lillySystemId
    sortDirection: Sort, # Ignored if first or last provided
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  # Only accountType is required for usersByAccountTypeAndSystemId Query
  usersByAccountTypeAndSystemId(
    accountType: AccountType!,
    lillySystemId: String,
    first: Int,
    last: Int,
    before: String,
    after: String,
    sortDirection: Sort,
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  # All parameters are optional for users Query
  users(
    lillyCostCenter: String,
    accountType: AccountType,
    orderBy: UsersOrderByInput, # Need field and direction
    first: Int, # If provided, last is ignored
    last: Int,
    before: UserOrderingInputField, # If provided, after is ignored
    after: UserOrderingInputField,
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  # Only m5GlobalId is required for usersByVpGlobalId query.
  # Results are sorted by lillySystemId.
  usersByVpGlobalId(
    m5GlobalId: String!,
    lillySystemId: String, # If provided will return single user
    sortDirection: Sort, # Ignored if first or last provided
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  vpByFirstAndLastName(
    m5FirstName: String!,
    m5LastName: String!
  ): VP 

  usersByEmployeeGroup(
    employeeGroupDescription: String!,
    lillySystemId: String, # Optional
    sortDirection: Sort,
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  usersByEmployeeStatus(
    employeeStatusDescription: String!,
    lillySystemId: String, # Optional
    sortDirection: Sort,
    limit: Int,
    nextToken: String
  ): PaginatedUsers!

  # This query returns the first billing cycle and a paginated list of
  # billing cycles. All parameters are optional. If no parameter is provided,
  # the first `DefaultLimit` fields are returned.
  getBillingCycles(
    first: Int,
    nextToken: String, # value is a billing cycle
    limit: Int,
  ): PaginatedBillingCycles!

  # This query returns a paginated list of DataSummary objects for the given
  # lillyCostCenter, sorted by billingCycle. All parameters, except
  # lillyCostCenter, are optional. If billingCycle is provided, the list should
  # contain at most one item.
  overviewDataByCostCenter(
    lillyCostCenter: String!, # Only required field
    billingCycle: String,
    limit: Int,
    sortDirection: Sort,
    nextToken: String
  ): PaginatedDataSummaries!

  # This query returns a paginated list of DataSummary objects for the given
  # m5GlobalId, sorted by billingCycle. All parameters, except m5GlobalId, are
  # optional. If billingCycle is provided, the list should contain at most one item.
  overviewDataByVp(
    m5GlobalId: String!,  # Only required field
    billingCycle: String,
    limit: Int,
    sortDirection: Sort,
    nextToken: String
  ): PaginatedDataSummaries!

  # This query returns a paginated list of DataSummary objects for all lilly
  # cost centers and all billing cycles. All parameters are optional. If
  # billingCycle is provided, the results will be sorted by lillyCostCenter.
  getAllCostCentersOverviewData(
    billingCycle: String,
    limit: Int,
    sortDirection: Sort,
    nextToken: String
  ): PaginatedDataSummaries!

  # This query returns a paginated list of DataSummary objects for all VPs and
  # all billing cycles. All parameters are optional. If billingCycle is given,
  # the results will be sorted by m5GlobalId.
  getAllVpsOverviewData(
    billingCycle: String,
    limit: Int,
    sortDirection: Sort,
    nextToken: String
  ): PaginatedDataSummaries!

}

schema {
  query: Query
}
