Comment: >-
  A state machine that coordinates the inital MTTR Data Process
StartAt: Filter Action Type
States:
  Filter Action Type:
    Type: Choice
    InputPath: "$.detail",
    Choices:
      - Variable: "$.action"
        StringEquals: "created"
        Next: Format Record for DB Entry
      - Variable: "$.action"
        StringEquals: "fixed"
        Next: Format Record for DB Update
      - Variable: "$.action"
        StringEquals: "closed_by_user"
        Next: Format Record for DB Update
    Default: Success State
  Format Record for DB Entry:
    Type: Task
    Resource: "${CreateDBRecordFunctionArn}"
    Parameters:
      alert.$: "$.alert",
      repository.$: "$.repository",
      organization.$: "$.organization",
    TimeoutSeconds: 60
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - States.Timeout
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Catch:
      - ErrorEquals:
          - States.ALL
        ResultPath: "$"
        Next: Process Error
    ResultPath: "$"
    Next: Put MTTR Data Into Table
  Put MTTR Data Into Table:
    Type: Task
    Resource: "arn:aws:states:::dynamodb:putItem"
    Parameters:
      TableName: "${AllDataTable}"
      ReturnConsumedCapacity: TOTAL
      Item:
        id:
          S.$: "$.record.id"
        organisationName:
          S.$: "$.record.organisationName"
        repositoryName:
          S.$: "$.record.repositoryName"
        alertID:
          N.$: "$.record.alertID"
        alertURL:
          S.$: "$.record.alertURL"
        alertCreatedAtFullTimestamp:
          S.$: "$.record.alertCreatedAtFullTimestamp"
        alertCreatedAtYear:
          N.$: "$.record.alertCreatedAtYear"
        alertCreatedAtMonth:
          N.$: "$.record.alertCreatedAtMonth"
        alertCreatedAtDate:
          N.$: "$.record.alertCreatedAtDate"
        alertClosedAtFullTimestamp:
          S.$: "$.record.alertClosedAtFullTimestamp"
    ResultPath: null
    Next: Success State
  Format Record for DB Update:
    Type: Task
    Resource: "${UpdateDBRecordFunctionArn}"
    TimeoutSeconds: 10
    HeartbeatSeconds: 30
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - States.Timeout
        IntervalSeconds: 2
        MaxAttempts: 3
        BackoffRate: 2
    Catch:
      - ErrorEquals:
          - States.ALL
        ResultPath: "$"
        Next: Process Error
    ResultPath: "$"
    Next: Update MTTR Data Into Table
  Update MTTR Data Into Table:
    Type: Task
    Resource: "arn:aws:states:::dynamodb:updateItem"
    Parameters:
      TableName: "${AllDataTable}"
      ReturnConsumedCapacity: TOTAL
      Key:
        id:
          S.$: "$.record.id"
      UpdateExpression: "set alertClosedAtFullTimestamp = :alertClosedAtFullTimestamp"
      ExpressionAttributeValues:
        ":alertClosedAtFullTimestamp":
          S.$: "$.record.alertClosedAtFullTimestamp"
    ResultPath: null
    Next: Success State
  Process Error:
    Type: Pass
    Parameters:
      Cause.$: States.StringToJson($.Cause)
    OutputPath: "$.Cause.errorMessage"
    Next: Fail State
  Success State:
    Type: Succeed
  Fail State:
    Type: Fail
